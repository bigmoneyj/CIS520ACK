
CIS 520 - Programming Project #1
Dr. Andresen

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alex Johnson <alster1@ksu.edu>
Kadin Zimmerman <kz121940@ksu.edu>
Chris Donnelly <cjdonnel@ksu.edu>

---- PRELIMINARIES ----

>> Comments: Kadin Zimmerman, Chris Donnelly, Alex Johnson

>> Online sources that we consulted to help learn about the project
    http://achurch.org/services/docs-5.1.24/tech/2.html
    http://knowledgejunk.net/2011/05/06/avoiding-busy-wait-in-timer_sleep-on-pintos/
    Project1SessionA.PDF On K-State Online


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

    struct semaphore sema_sleep;  /* Semaphore used to implement alarm_clock */
        This helped us put the threads to sleep and wake them up.
    
    struct list_elem sleepelem;
        This helped us keep track of the sleeping threads

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
    If the number of ticks is less than or eqal to 0, then we don't want to be sleeping anymore, so we return.
    Otherwise, we want to put the thread to sleep for however many ticks specified.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
    We created a sleep list, that way when we want to see if it is possible to wake a thread, we only check
    those that are sleeping and not the ones that are waiting or currently running.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
    We use locks to avoid the race conditions when multiple threads call timer_sleep() simultaneously.
    By putting locks around the critical section, we can only have one thread working at a time, and then we can 
    release the lock, allowing the other threads who are waiting to access the critical section next.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
    To avoid race conditions when a timer interrupt occurs during a call to timer_sleep(), we briefly disable interrupts
    before adding the thread to the waiting list, and then re-enable the interrupts after it has been added to the list.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?
    Originally we had a design where we were checking every thread to see if it was able to be woken back up. This design was not     good because in reality, we don't want to check the threads that are currently waiting, or running. So we re-implemented it      to check only those that are currently in a sleeping state. 


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
    
    struct semaphore sema_sleep;
        This is a semaphore for the sleeping thread
    struct list_elem donation_elem;
        This is a list of the donation elements
    struct list donor_list; 
        This is a list of the donors
    struct lock *blocker;
        This is a lock of the blocker
        
>> B2: Explain the data structure used to track priority donation.
    The data structure used to track priority donation is the list of donors.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
    By placing the sleeping threads in a list ordered by priority. If the current thread has the lock, and has a priority
    which is lower than the thread waiting for the lock, then we need to do priority donation. We essentially swap the priorities
    of the current locked thread with the waiting thread, that way when the lock is released, the thread that was waiting will
    get it next.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
    
>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

